// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: offerservice/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgAcceptOffer struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OfferId string `protobuf:"bytes,2,opt,name=offerId,proto3" json:"offerId,omitempty"`
}

func (m *MsgAcceptOffer) Reset()         { *m = MsgAcceptOffer{} }
func (m *MsgAcceptOffer) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOffer) ProtoMessage()    {}
func (*MsgAcceptOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217099f5a9c3771, []int{0}
}
func (m *MsgAcceptOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOffer.Merge(m, src)
}
func (m *MsgAcceptOffer) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOffer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOffer proto.InternalMessageInfo

func (m *MsgAcceptOffer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAcceptOffer) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

type MsgAcceptOfferResponse struct {
	OfferId   string `protobuf:"bytes,1,opt,name=offerId,proto3" json:"offerId,omitempty"`
	CharId    string `protobuf:"bytes,2,opt,name=charId,proto3" json:"charId,omitempty"`
	SalePrice string `protobuf:"bytes,3,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
}

func (m *MsgAcceptOfferResponse) Reset()         { *m = MsgAcceptOfferResponse{} }
func (m *MsgAcceptOfferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOfferResponse) ProtoMessage()    {}
func (*MsgAcceptOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217099f5a9c3771, []int{1}
}
func (m *MsgAcceptOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOfferResponse.Merge(m, src)
}
func (m *MsgAcceptOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOfferResponse proto.InternalMessageInfo

func (m *MsgAcceptOfferResponse) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

func (m *MsgAcceptOfferResponse) GetCharId() string {
	if m != nil {
		return m.CharId
	}
	return ""
}

func (m *MsgAcceptOfferResponse) GetSalePrice() string {
	if m != nil {
		return m.SalePrice
	}
	return ""
}

type MsgCreateOffer struct {
	ExpireInMinutes int64  `protobuf:"varint,1,opt,name=expireInMinutes,proto3" json:"expireInMinutes,omitempty"`
	Creator         string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Bid             string `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`
	CharId          string `protobuf:"bytes,4,opt,name=charId,proto3" json:"charId,omitempty"`
}

func (m *MsgCreateOffer) Reset()         { *m = MsgCreateOffer{} }
func (m *MsgCreateOffer) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOffer) ProtoMessage()    {}
func (*MsgCreateOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217099f5a9c3771, []int{2}
}
func (m *MsgCreateOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOffer.Merge(m, src)
}
func (m *MsgCreateOffer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOffer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOffer proto.InternalMessageInfo

func (m *MsgCreateOffer) GetExpireInMinutes() int64 {
	if m != nil {
		return m.ExpireInMinutes
	}
	return 0
}

func (m *MsgCreateOffer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateOffer) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *MsgCreateOffer) GetCharId() string {
	if m != nil {
		return m.CharId
	}
	return ""
}

type MsgCreateOfferResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCreateOfferResponse) Reset()         { *m = MsgCreateOfferResponse{} }
func (m *MsgCreateOfferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOfferResponse) ProtoMessage()    {}
func (*MsgCreateOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217099f5a9c3771, []int{3}
}
func (m *MsgCreateOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOfferResponse.Merge(m, src)
}
func (m *MsgCreateOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOfferResponse proto.InternalMessageInfo

func (m *MsgCreateOfferResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgAcceptOffer)(nil), "charactertoken.ctok.offerservice.MsgAcceptOffer")
	proto.RegisterType((*MsgAcceptOfferResponse)(nil), "charactertoken.ctok.offerservice.MsgAcceptOfferResponse")
	proto.RegisterType((*MsgCreateOffer)(nil), "charactertoken.ctok.offerservice.MsgCreateOffer")
	proto.RegisterType((*MsgCreateOfferResponse)(nil), "charactertoken.ctok.offerservice.MsgCreateOfferResponse")
}

func init() { proto.RegisterFile("offerservice/tx.proto", fileDescriptor_2217099f5a9c3771) }

var fileDescriptor_2217099f5a9c3771 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3f, 0x4f, 0xc2, 0x40,
	0x14, 0xe7, 0xa8, 0x62, 0x78, 0x24, 0x6a, 0x1a, 0x25, 0x8d, 0x31, 0x0d, 0xe9, 0xc4, 0x74, 0x35,
	0xb2, 0xb8, 0xfa, 0x67, 0x61, 0x68, 0x34, 0x8c, 0x6e, 0xe5, 0x78, 0xc0, 0x05, 0xed, 0x35, 0x77,
	0x87, 0x29, 0x8b, 0x9f, 0xc1, 0x8f, 0xe5, 0xc8, 0xe8, 0x68, 0xe0, 0x63, 0xb8, 0x98, 0x96, 0x5a,
	0xef, 0x8c, 0x89, 0xb8, 0xf5, 0xdd, 0xeb, 0xef, 0xef, 0x1d, 0x1c, 0x8b, 0xf1, 0x18, 0xa5, 0x42,
	0xf9, 0xc4, 0x19, 0x86, 0x3a, 0xa3, 0xa9, 0x14, 0x5a, 0xb8, 0x1d, 0x36, 0x8d, 0x65, 0xcc, 0x34,
	0x4a, 0x2d, 0x66, 0x98, 0x50, 0xa6, 0xc5, 0x8c, 0x9a, 0xbf, 0x06, 0x37, 0xb0, 0x1f, 0xa9, 0xc9,
	0x25, 0x63, 0x98, 0xea, 0xdb, 0x7c, 0xe1, 0x7a, 0xb0, 0xc7, 0x24, 0xc6, 0x5a, 0x48, 0x8f, 0x74,
	0x48, 0xb7, 0x39, 0xf8, 0x1a, 0xf3, 0x4d, 0x81, 0xed, 0x8f, 0xbc, 0xfa, 0x66, 0x53, 0x8e, 0xc1,
	0x14, 0xda, 0x36, 0xcb, 0x00, 0x55, 0x2a, 0x12, 0x85, 0x26, 0x86, 0x58, 0x18, 0xb7, 0x0d, 0x8d,
	0xdc, 0x5d, 0x45, 0x56, 0x4e, 0xee, 0x29, 0x34, 0x55, 0xfc, 0x80, 0x77, 0x92, 0x33, 0xf4, 0x9c,
	0x62, 0xf5, 0x7d, 0x10, 0x3c, 0x17, 0x7e, 0xaf, 0x73, 0x47, 0xb8, 0xf1, 0xdb, 0x85, 0x03, 0xcc,
	0x52, 0x2e, 0xb1, 0x9f, 0x44, 0x3c, 0x99, 0x6b, 0x54, 0x85, 0x92, 0x33, 0xf8, 0x79, 0x6c, 0x26,
	0xab, 0xdb, 0xc9, 0x0e, 0xc1, 0x19, 0xf2, 0x51, 0xa9, 0x96, 0x7f, 0x1a, 0xee, 0x76, 0x4c, 0x77,
	0x01, 0x2d, 0x92, 0x1a, 0xfa, 0x55, 0xd2, 0x23, 0xd8, 0xe5, 0xc9, 0x08, 0xb3, 0x32, 0xe7, 0x66,
	0x38, 0xff, 0x20, 0xe0, 0x44, 0x6a, 0xe2, 0x2e, 0xa0, 0x65, 0x96, 0x7c, 0x46, 0xff, 0xba, 0x19,
	0x6a, 0x17, 0x7a, 0x72, 0xf1, 0x5f, 0x44, 0x65, 0x6c, 0x01, 0x2d, 0xb3, 0xaf, 0xed, 0xa4, 0x0d,
	0xc4, 0x96, 0xd2, 0xbf, 0x74, 0x72, 0x15, 0xbd, 0xae, 0x7c, 0xb2, 0x5c, 0xf9, 0xe4, 0x7d, 0xe5,
	0x93, 0x97, 0xb5, 0x5f, 0x5b, 0xae, 0xfd, 0xda, 0xdb, 0xda, 0xaf, 0xdd, 0xf7, 0x26, 0x5c, 0x4f,
	0xe7, 0x43, 0xca, 0xc4, 0x63, 0x68, 0xb3, 0x87, 0x39, 0x7b, 0x98, 0x85, 0xf6, 0x8b, 0x5e, 0xa4,
	0xa8, 0x86, 0x8d, 0xe2, 0x55, 0xf7, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x00, 0x2a, 0xca,
	0xee, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	AcceptOffer(ctx context.Context, in *MsgAcceptOffer, opts ...grpc.CallOption) (*MsgAcceptOfferResponse, error)
	CreateOffer(ctx context.Context, in *MsgCreateOffer, opts ...grpc.CallOption) (*MsgCreateOfferResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AcceptOffer(ctx context.Context, in *MsgAcceptOffer, opts ...grpc.CallOption) (*MsgAcceptOfferResponse, error) {
	out := new(MsgAcceptOfferResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.offerservice.Msg/AcceptOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOffer(ctx context.Context, in *MsgCreateOffer, opts ...grpc.CallOption) (*MsgCreateOfferResponse, error) {
	out := new(MsgCreateOfferResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.offerservice.Msg/CreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	AcceptOffer(context.Context, *MsgAcceptOffer) (*MsgAcceptOfferResponse, error)
	CreateOffer(context.Context, *MsgCreateOffer) (*MsgCreateOfferResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AcceptOffer(ctx context.Context, req *MsgAcceptOffer) (*MsgAcceptOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOffer not implemented")
}
func (*UnimplementedMsgServer) CreateOffer(ctx context.Context, req *MsgCreateOffer) (*MsgCreateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AcceptOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.offerservice.Msg/AcceptOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOffer(ctx, req.(*MsgAcceptOffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.offerservice.Msg/CreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOffer(ctx, req.(*MsgCreateOffer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charactertoken.ctok.offerservice.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOffer",
			Handler:    _Msg_AcceptOffer_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _Msg_CreateOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offerservice/tx.proto",
}

func (m *MsgAcceptOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SalePrice) > 0 {
		i -= len(m.SalePrice)
		copy(dAtA[i:], m.SalePrice)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SalePrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CharId) > 0 {
		i -= len(m.CharId)
		copy(dAtA[i:], m.CharId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CharId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CharId) > 0 {
		i -= len(m.CharId)
		copy(dAtA[i:], m.CharId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CharId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bid) > 0 {
		i -= len(m.Bid)
		copy(dAtA[i:], m.Bid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ExpireInMinutes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpireInMinutes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAcceptOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CharId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SalePrice)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireInMinutes != 0 {
		n += 1 + sovTx(uint64(m.ExpireInMinutes))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Bid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CharId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAcceptOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CharId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SalePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireInMinutes", wireType)
			}
			m.ExpireInMinutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireInMinutes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CharId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

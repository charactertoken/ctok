// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: typeservice/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetAllTypesByNameRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllTypesByNameRequest) Reset()         { *m = QueryGetAllTypesByNameRequest{} }
func (m *QueryGetAllTypesByNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllTypesByNameRequest) ProtoMessage()    {}
func (*QueryGetAllTypesByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{0}
}
func (m *QueryGetAllTypesByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllTypesByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllTypesByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllTypesByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllTypesByNameRequest.Merge(m, src)
}
func (m *QueryGetAllTypesByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllTypesByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllTypesByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllTypesByNameRequest proto.InternalMessageInfo

func (m *QueryGetAllTypesByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryGetAllTypesByNameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllTypesByNameResponse struct {
	Ctype      []*Ctype            `protobuf:"bytes,1,rep,name=ctype,proto3" json:"ctype,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllTypesByNameResponse) Reset()         { *m = QueryGetAllTypesByNameResponse{} }
func (m *QueryGetAllTypesByNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllTypesByNameResponse) ProtoMessage()    {}
func (*QueryGetAllTypesByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{1}
}
func (m *QueryGetAllTypesByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllTypesByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllTypesByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllTypesByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllTypesByNameResponse.Merge(m, src)
}
func (m *QueryGetAllTypesByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllTypesByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllTypesByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllTypesByNameResponse proto.InternalMessageInfo

func (m *QueryGetAllTypesByNameResponse) GetCtype() []*Ctype {
	if m != nil {
		return m.Ctype
	}
	return nil
}

func (m *QueryGetAllTypesByNameResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllTypesByGroupRequest struct {
	Group      string             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllTypesByGroupRequest) Reset()         { *m = QueryGetAllTypesByGroupRequest{} }
func (m *QueryGetAllTypesByGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllTypesByGroupRequest) ProtoMessage()    {}
func (*QueryGetAllTypesByGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{2}
}
func (m *QueryGetAllTypesByGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllTypesByGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllTypesByGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllTypesByGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllTypesByGroupRequest.Merge(m, src)
}
func (m *QueryGetAllTypesByGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllTypesByGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllTypesByGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllTypesByGroupRequest proto.InternalMessageInfo

func (m *QueryGetAllTypesByGroupRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *QueryGetAllTypesByGroupRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllTypesByGroupResponse struct {
	Ctype      []*Ctype            `protobuf:"bytes,1,rep,name=ctype,proto3" json:"ctype,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllTypesByGroupResponse) Reset()         { *m = QueryGetAllTypesByGroupResponse{} }
func (m *QueryGetAllTypesByGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllTypesByGroupResponse) ProtoMessage()    {}
func (*QueryGetAllTypesByGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{3}
}
func (m *QueryGetAllTypesByGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllTypesByGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllTypesByGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllTypesByGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllTypesByGroupResponse.Merge(m, src)
}
func (m *QueryGetAllTypesByGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllTypesByGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllTypesByGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllTypesByGroupResponse proto.InternalMessageInfo

func (m *QueryGetAllTypesByGroupResponse) GetCtype() []*Ctype {
	if m != nil {
		return m.Ctype
	}
	return nil
}

func (m *QueryGetAllTypesByGroupResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCtypeRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCtypeRequest) Reset()         { *m = QueryGetCtypeRequest{} }
func (m *QueryGetCtypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCtypeRequest) ProtoMessage()    {}
func (*QueryGetCtypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{4}
}
func (m *QueryGetCtypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCtypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCtypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCtypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCtypeRequest.Merge(m, src)
}
func (m *QueryGetCtypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCtypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCtypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCtypeRequest proto.InternalMessageInfo

func (m *QueryGetCtypeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCtypeResponse struct {
	Ctype *Ctype `protobuf:"bytes,1,opt,name=Ctype,proto3" json:"Ctype,omitempty"`
}

func (m *QueryGetCtypeResponse) Reset()         { *m = QueryGetCtypeResponse{} }
func (m *QueryGetCtypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCtypeResponse) ProtoMessage()    {}
func (*QueryGetCtypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{5}
}
func (m *QueryGetCtypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCtypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCtypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCtypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCtypeResponse.Merge(m, src)
}
func (m *QueryGetCtypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCtypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCtypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCtypeResponse proto.InternalMessageInfo

func (m *QueryGetCtypeResponse) GetCtype() *Ctype {
	if m != nil {
		return m.Ctype
	}
	return nil
}

type QueryAllCtypeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCtypeRequest) Reset()         { *m = QueryAllCtypeRequest{} }
func (m *QueryAllCtypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCtypeRequest) ProtoMessage()    {}
func (*QueryAllCtypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{6}
}
func (m *QueryAllCtypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCtypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCtypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCtypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCtypeRequest.Merge(m, src)
}
func (m *QueryAllCtypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCtypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCtypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCtypeRequest proto.InternalMessageInfo

func (m *QueryAllCtypeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCtypeResponse struct {
	Ctype      []*Ctype            `protobuf:"bytes,1,rep,name=Ctype,proto3" json:"Ctype,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCtypeResponse) Reset()         { *m = QueryAllCtypeResponse{} }
func (m *QueryAllCtypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCtypeResponse) ProtoMessage()    {}
func (*QueryAllCtypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc83be4e8fc4d36, []int{7}
}
func (m *QueryAllCtypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCtypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCtypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCtypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCtypeResponse.Merge(m, src)
}
func (m *QueryAllCtypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCtypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCtypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCtypeResponse proto.InternalMessageInfo

func (m *QueryAllCtypeResponse) GetCtype() []*Ctype {
	if m != nil {
		return m.Ctype
	}
	return nil
}

func (m *QueryAllCtypeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAllTypesByNameRequest)(nil), "charactertoken.ctok.typeservice.QueryGetAllTypesByNameRequest")
	proto.RegisterType((*QueryGetAllTypesByNameResponse)(nil), "charactertoken.ctok.typeservice.QueryGetAllTypesByNameResponse")
	proto.RegisterType((*QueryGetAllTypesByGroupRequest)(nil), "charactertoken.ctok.typeservice.QueryGetAllTypesByGroupRequest")
	proto.RegisterType((*QueryGetAllTypesByGroupResponse)(nil), "charactertoken.ctok.typeservice.QueryGetAllTypesByGroupResponse")
	proto.RegisterType((*QueryGetCtypeRequest)(nil), "charactertoken.ctok.typeservice.QueryGetCtypeRequest")
	proto.RegisterType((*QueryGetCtypeResponse)(nil), "charactertoken.ctok.typeservice.QueryGetCtypeResponse")
	proto.RegisterType((*QueryAllCtypeRequest)(nil), "charactertoken.ctok.typeservice.QueryAllCtypeRequest")
	proto.RegisterType((*QueryAllCtypeResponse)(nil), "charactertoken.ctok.typeservice.QueryAllCtypeResponse")
}

func init() { proto.RegisterFile("typeservice/query.proto", fileDescriptor_1fc83be4e8fc4d36) }

var fileDescriptor_1fc83be4e8fc4d36 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0xad, 0x29, 0x3a, 0x9e, 0x7c, 0x54, 0x0c, 0x8b, 0x6e, 0xc3, 0x1e, 0x6a, 0x10,
	0x99, 0xb1, 0xa9, 0xed, 0x41, 0x45, 0x4d, 0x0b, 0xe6, 0x22, 0xa2, 0x41, 0x2f, 0x1e, 0x84, 0xc9,
	0x3a, 0x6c, 0x97, 0x6e, 0x76, 0xb6, 0xbb, 0x93, 0xd2, 0x50, 0xf4, 0xe0, 0x1f, 0x20, 0x82, 0x77,
	0xaf, 0xea, 0xc5, 0xbf, 0xc3, 0x63, 0x40, 0x0f, 0x1e, 0x25, 0xf1, 0x0f, 0x91, 0x9d, 0x99, 0x90,
	0xdd, 0x24, 0x6d, 0x7e, 0xd0, 0x43, 0x4f, 0xd9, 0x47, 0xde, 0xfb, 0xbe, 0xcf, 0xfb, 0xce, 0xbe,
	0x59, 0x7c, 0x4d, 0x76, 0x22, 0x9e, 0xf0, 0xf8, 0xd0, 0x77, 0x39, 0x3d, 0x68, 0xf3, 0xb8, 0x43,
	0xa2, 0x58, 0x48, 0x01, 0x6b, 0xee, 0x1e, 0x8b, 0x99, 0x2b, 0x79, 0x2c, 0xc5, 0x3e, 0x0f, 0x89,
	0x2b, 0xc5, 0x3e, 0xc9, 0x24, 0x5b, 0xd7, 0x3d, 0x21, 0xbc, 0x80, 0x53, 0x16, 0xf9, 0x94, 0x85,
	0xa1, 0x90, 0x4c, 0xfa, 0x22, 0x4c, 0x74, 0xb9, 0x75, 0xcb, 0x15, 0x49, 0x4b, 0x24, 0xb4, 0xc9,
	0x12, 0xa3, 0x4b, 0x0f, 0x37, 0x9a, 0x5c, 0xb2, 0x0d, 0x1a, 0x31, 0xcf, 0x0f, 0x55, 0xb2, 0xc9,
	0xcd, 0x31, 0xb8, 0x69, 0xa0, 0xff, 0x70, 0x8e, 0xf1, 0x8d, 0x17, 0x69, 0x69, 0x9d, 0xcb, 0x5a,
	0x10, 0xbc, 0x4c, 0xb3, 0x76, 0x3a, 0xcf, 0x58, 0x8b, 0x37, 0xf8, 0x41, 0x9b, 0x27, 0x12, 0x00,
	0x5f, 0x08, 0x59, 0x8b, 0x97, 0x50, 0x19, 0x55, 0x2e, 0x35, 0xd4, 0x33, 0x3c, 0xc1, 0x78, 0xd8,
	0xa1, 0xb4, 0x54, 0x46, 0x95, 0xcb, 0xd5, 0x75, 0xa2, 0x71, 0x48, 0x8a, 0x43, 0xf4, 0x98, 0x06,
	0x87, 0x3c, 0x67, 0xde, 0x40, 0xaf, 0x91, 0xa9, 0x74, 0xbe, 0x22, 0x6c, 0x9f, 0xd4, 0x3d, 0x89,
	0x44, 0x98, 0x70, 0x78, 0x80, 0x8b, 0x0a, 0xb7, 0x84, 0xca, 0xcb, 0xba, 0xcb, 0xe9, 0x9e, 0x91,
	0xdd, 0x34, 0x68, 0xe8, 0x22, 0xa8, 0x4f, 0x00, 0xbd, 0x39, 0x15, 0x54, 0xb7, 0xce, 0x91, 0xbe,
	0x9f, 0x04, 0x5a, 0x8f, 0x45, 0x3b, 0x1a, 0xf8, 0xb4, 0x8a, 0x8b, 0x5e, 0x1a, 0x1b, 0xa3, 0x74,
	0x70, 0x66, 0x4e, 0x7d, 0x43, 0x78, 0xed, 0x44, 0x80, 0xf3, 0x65, 0xd5, 0x6d, 0xbc, 0x3a, 0x20,
	0xd5, 0x0d, 0x86, 0x06, 0xf9, 0xe1, 0x5b, 0x7e, 0x34, 0x30, 0x48, 0x05, 0xce, 0x2b, 0x7c, 0x75,
	0x24, 0x7b, 0x38, 0xcd, 0xae, 0x99, 0x06, 0xcd, 0x33, 0x8d, 0xfa, 0x71, 0xde, 0x18, 0x88, 0x5a,
	0x10, 0xe4, 0x20, 0xf2, 0xe7, 0x81, 0x16, 0x3e, 0x8f, 0x2f, 0xc8, 0x70, 0x0f, 0x1b, 0x8c, 0x73,
	0x2f, 0xcf, 0xcd, 0x7d, 0x66, 0xa7, 0x50, 0xfd, 0xb8, 0x82, 0x8b, 0x0a, 0x10, 0xba, 0x08, 0x5f,
	0x19, 0xdb, 0x2f, 0x78, 0x38, 0x95, 0xeb, 0xd4, 0x6b, 0xc1, 0x7a, 0xb4, 0x70, 0xbd, 0x86, 0x75,
	0xee, 0x7d, 0xf8, 0xf5, 0xef, 0xf3, 0xd2, 0x5d, 0xa8, 0xd2, 0xbc, 0x10, 0x4d, 0x85, 0x68, 0xf6,
	0xba, 0xf2, 0xc6, 0xe0, 0x7f, 0x23, 0x0c, 0xe3, 0x8b, 0x00, 0x8b, 0x30, 0x65, 0x77, 0xd8, 0x7a,
	0xbc, 0xb8, 0x80, 0x99, 0xea, 0xbe, 0x9a, 0x6a, 0x0b, 0x36, 0xe7, 0x9b, 0x4a, 0xf3, 0xff, 0x40,
	0xe6, 0xdd, 0x81, 0xad, 0x99, 0x41, 0xb2, 0x6f, 0xb7, 0xb5, 0x3d, 0x6f, 0x99, 0xa1, 0xde, 0x56,
	0xd4, 0x77, 0x80, 0x4c, 0xa5, 0x56, 0x77, 0x05, 0x3d, 0x56, 0xbb, 0xfb, 0x0e, 0xbe, 0x23, 0x7c,
	0x51, 0x29, 0xd5, 0x82, 0x60, 0x56, 0xe6, 0x91, 0x8d, 0x9c, 0x95, 0x79, 0x74, 0xcf, 0x1c, 0xa2,
	0x98, 0x2b, 0xb0, 0x3e, 0x1b, 0xf3, 0xce, 0xd3, 0x9f, 0x3d, 0x1b, 0x75, 0x7b, 0x36, 0xfa, 0xdb,
	0xb3, 0xd1, 0xa7, 0xbe, 0x5d, 0xe8, 0xf6, 0xed, 0xc2, 0x9f, 0xbe, 0x5d, 0x78, 0x5d, 0xf5, 0x7c,
	0xb9, 0xd7, 0x6e, 0x12, 0x57, 0xb4, 0x26, 0x6a, 0x1d, 0xe5, 0xd4, 0xd4, 0x73, 0x73, 0x45, 0x7d,
	0x3d, 0x37, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x7b, 0xce, 0xf4, 0xdc, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of getAllTypesByName items.
	GetAllTypesByName(ctx context.Context, in *QueryGetAllTypesByNameRequest, opts ...grpc.CallOption) (*QueryGetAllTypesByNameResponse, error)
	// Queries a list of getAllTypesByGroup items.
	GetAllTypesByGroup(ctx context.Context, in *QueryGetAllTypesByGroupRequest, opts ...grpc.CallOption) (*QueryGetAllTypesByGroupResponse, error)
	// Queries a ctype by index.
	Ctype(ctx context.Context, in *QueryGetCtypeRequest, opts ...grpc.CallOption) (*QueryGetCtypeResponse, error)
	// Queries a list of ctype items.
	CtypeAll(ctx context.Context, in *QueryAllCtypeRequest, opts ...grpc.CallOption) (*QueryAllCtypeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllTypesByName(ctx context.Context, in *QueryGetAllTypesByNameRequest, opts ...grpc.CallOption) (*QueryGetAllTypesByNameResponse, error) {
	out := new(QueryGetAllTypesByNameResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.typeservice.Query/GetAllTypesByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllTypesByGroup(ctx context.Context, in *QueryGetAllTypesByGroupRequest, opts ...grpc.CallOption) (*QueryGetAllTypesByGroupResponse, error) {
	out := new(QueryGetAllTypesByGroupResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.typeservice.Query/GetAllTypesByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ctype(ctx context.Context, in *QueryGetCtypeRequest, opts ...grpc.CallOption) (*QueryGetCtypeResponse, error) {
	out := new(QueryGetCtypeResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.typeservice.Query/Ctype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CtypeAll(ctx context.Context, in *QueryAllCtypeRequest, opts ...grpc.CallOption) (*QueryAllCtypeResponse, error) {
	out := new(QueryAllCtypeResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.typeservice.Query/CtypeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of getAllTypesByName items.
	GetAllTypesByName(context.Context, *QueryGetAllTypesByNameRequest) (*QueryGetAllTypesByNameResponse, error)
	// Queries a list of getAllTypesByGroup items.
	GetAllTypesByGroup(context.Context, *QueryGetAllTypesByGroupRequest) (*QueryGetAllTypesByGroupResponse, error)
	// Queries a ctype by index.
	Ctype(context.Context, *QueryGetCtypeRequest) (*QueryGetCtypeResponse, error)
	// Queries a list of ctype items.
	CtypeAll(context.Context, *QueryAllCtypeRequest) (*QueryAllCtypeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllTypesByName(ctx context.Context, req *QueryGetAllTypesByNameRequest) (*QueryGetAllTypesByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypesByName not implemented")
}
func (*UnimplementedQueryServer) GetAllTypesByGroup(ctx context.Context, req *QueryGetAllTypesByGroupRequest) (*QueryGetAllTypesByGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypesByGroup not implemented")
}
func (*UnimplementedQueryServer) Ctype(ctx context.Context, req *QueryGetCtypeRequest) (*QueryGetCtypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ctype not implemented")
}
func (*UnimplementedQueryServer) CtypeAll(ctx context.Context, req *QueryAllCtypeRequest) (*QueryAllCtypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CtypeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllTypesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllTypesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllTypesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.typeservice.Query/GetAllTypesByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllTypesByName(ctx, req.(*QueryGetAllTypesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllTypesByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllTypesByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllTypesByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.typeservice.Query/GetAllTypesByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllTypesByGroup(ctx, req.(*QueryGetAllTypesByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ctype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCtypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ctype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.typeservice.Query/Ctype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ctype(ctx, req.(*QueryGetCtypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CtypeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCtypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CtypeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.typeservice.Query/CtypeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CtypeAll(ctx, req.(*QueryAllCtypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charactertoken.ctok.typeservice.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTypesByName",
			Handler:    _Query_GetAllTypesByName_Handler,
		},
		{
			MethodName: "GetAllTypesByGroup",
			Handler:    _Query_GetAllTypesByGroup_Handler,
		},
		{
			MethodName: "Ctype",
			Handler:    _Query_Ctype_Handler,
		},
		{
			MethodName: "CtypeAll",
			Handler:    _Query_CtypeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "typeservice/query.proto",
}

func (m *QueryGetAllTypesByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllTypesByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllTypesByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllTypesByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllTypesByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllTypesByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ctype) > 0 {
		for iNdEx := len(m.Ctype) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ctype[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllTypesByGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllTypesByGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllTypesByGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllTypesByGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllTypesByGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllTypesByGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ctype) > 0 {
		for iNdEx := len(m.Ctype) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ctype[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCtypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCtypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCtypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCtypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCtypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCtypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ctype != nil {
		{
			size, err := m.Ctype.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCtypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCtypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCtypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCtypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCtypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCtypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ctype) > 0 {
		for iNdEx := len(m.Ctype) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ctype[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAllTypesByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllTypesByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ctype) > 0 {
		for _, e := range m.Ctype {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllTypesByGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllTypesByGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ctype) > 0 {
		for _, e := range m.Ctype {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCtypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCtypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ctype != nil {
		l = m.Ctype.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCtypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCtypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ctype) > 0 {
		for _, e := range m.Ctype {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAllTypesByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllTypesByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllTypesByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllTypesByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllTypesByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllTypesByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = append(m.Ctype, &Ctype{})
			if err := m.Ctype[len(m.Ctype)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllTypesByGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllTypesByGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllTypesByGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllTypesByGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllTypesByGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllTypesByGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = append(m.Ctype, &Ctype{})
			if err := m.Ctype[len(m.Ctype)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCtypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCtypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCtypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCtypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCtypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCtypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ctype == nil {
				m.Ctype = &Ctype{}
			}
			if err := m.Ctype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCtypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCtypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCtypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCtypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCtypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCtypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = append(m.Ctype, &Ctype{})
			if err := m.Ctype[len(m.Ctype)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

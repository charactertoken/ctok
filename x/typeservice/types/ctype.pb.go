// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: typeservice/ctype.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ctype struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index       string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Language    string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	SchemaFile  []byte `protobuf:"bytes,5,opt,name=schemaFile,proto3" json:"schemaFile,omitempty"`
	MessageName string `protobuf:"bytes,6,opt,name=messageName,proto3" json:"messageName,omitempty"`
	Group       string `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *Ctype) Reset()         { *m = Ctype{} }
func (m *Ctype) String() string { return proto.CompactTextString(m) }
func (*Ctype) ProtoMessage()    {}
func (*Ctype) Descriptor() ([]byte, []int) {
	return fileDescriptor_74fb559d459b8e8f, []int{0}
}
func (m *Ctype) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ctype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ctype.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ctype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ctype.Merge(m, src)
}
func (m *Ctype) XXX_Size() int {
	return m.Size()
}
func (m *Ctype) XXX_DiscardUnknown() {
	xxx_messageInfo_Ctype.DiscardUnknown(m)
}

var xxx_messageInfo_Ctype proto.InternalMessageInfo

func (m *Ctype) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Ctype) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Ctype) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ctype) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Ctype) GetSchemaFile() []byte {
	if m != nil {
		return m.SchemaFile
	}
	return nil
}

func (m *Ctype) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Ctype) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func init() {
	proto.RegisterType((*Ctype)(nil), "charactertoken.ctok.typeservice.Ctype")
}

func init() { proto.RegisterFile("typeservice/ctype.proto", fileDescriptor_74fb559d459b8e8f) }

var fileDescriptor_74fb559d459b8e8f = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x6f, 0x5a, 0x30, 0x4c, 0x56, 0x25, 0xac, 0x0e, 0x26, 0x62, 0xea, 0x14,
	0x4b, 0xf0, 0x06, 0x20, 0x31, 0x21, 0x86, 0x8e, 0x6c, 0xae, 0xb9, 0x72, 0xa2, 0x36, 0xb9, 0x91,
	0xe3, 0xa0, 0xf2, 0x16, 0xbc, 0x11, 0x2b, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08, 0xf2, 0x8d, 0x40,
	0x61, 0x3b, 0xdf, 0xa7, 0x63, 0xeb, 0xea, 0xf0, 0x8b, 0xf0, 0xda, 0x40, 0x0b, 0xfe, 0xa5, 0xb4,
	0xa0, 0x6d, 0x84, 0xbc, 0xf1, 0x18, 0x50, 0x5c, 0xda, 0xc2, 0x78, 0x63, 0x03, 0xf8, 0x80, 0x3b,
	0xa8, 0x73, 0x1b, 0x70, 0x97, 0x4f, 0xca, 0xab, 0xa5, 0x43, 0x87, 0xd4, 0xd5, 0x31, 0x8d, 0xcf,
	0xae, 0xde, 0x19, 0x4f, 0xef, 0x62, 0x4d, 0x48, 0xbe, 0xb0, 0x1e, 0x4c, 0x40, 0x2f, 0x59, 0xc6,
	0xd6, 0xa7, 0x9b, 0x1f, 0x14, 0x4b, 0x9e, 0x96, 0xf5, 0x33, 0x1c, 0xe4, 0x3f, 0xf2, 0x23, 0x08,
	0xc1, 0x67, 0xb5, 0xa9, 0x40, 0xfe, 0x27, 0x49, 0x59, 0xac, 0xf8, 0xc9, 0xde, 0xd4, 0xae, 0x33,
	0x0e, 0xe4, 0x8c, 0xfc, 0x2f, 0x0b, 0xc5, 0x79, 0x6b, 0x0b, 0xa8, 0xcc, 0x7d, 0xb9, 0x07, 0x99,
	0x66, 0x6c, 0x7d, 0xbe, 0x99, 0x18, 0x91, 0xf1, 0xb3, 0x0a, 0xda, 0xd6, 0x38, 0x78, 0x8c, 0xdf,
	0xce, 0xe9, 0xf9, 0x54, 0xc5, 0x3b, 0x9c, 0xc7, 0xae, 0x91, 0x8b, 0xf1, 0x0e, 0x82, 0xdb, 0x87,
	0x8f, 0x5e, 0xb1, 0x63, 0xaf, 0xd8, 0x57, 0xaf, 0xd8, 0xdb, 0xa0, 0x92, 0xe3, 0xa0, 0x92, 0xcf,
	0x41, 0x25, 0x4f, 0xd7, 0xae, 0x0c, 0x45, 0xb7, 0xcd, 0x2d, 0x56, 0xfa, 0xef, 0x3a, 0x3a, 0xae,
	0xa3, 0x0f, 0x7a, 0x3a, 0x26, 0xe5, 0xed, 0x9c, 0x66, 0xb9, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xcc, 0x7a, 0x14, 0x68, 0x01, 0x00, 0x00,
}

func (m *Ctype) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ctype) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ctype) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MessageName) > 0 {
		i -= len(m.MessageName)
		copy(dAtA[i:], m.MessageName)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.MessageName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SchemaFile) > 0 {
		i -= len(m.SchemaFile)
		copy(dAtA[i:], m.SchemaFile)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.SchemaFile)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCtype(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCtype(dAtA []byte, offset int, v uint64) int {
	offset -= sovCtype(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ctype) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.SchemaFile)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.MessageName)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovCtype(uint64(l))
	}
	return n
}

func sovCtype(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCtype(x uint64) (n int) {
	return sovCtype(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ctype) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ctype: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ctype: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaFile", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaFile = append(m.SchemaFile[:0], dAtA[iNdEx:postIndex]...)
			if m.SchemaFile == nil {
				m.SchemaFile = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCtype(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCtype
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCtype
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCtype
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCtype
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCtype        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCtype          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCtype = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charservice/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetAllCharsByCreatorRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsByCreatorRequest) Reset()         { *m = QueryGetAllCharsByCreatorRequest{} }
func (m *QueryGetAllCharsByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsByCreatorRequest) ProtoMessage()    {}
func (*QueryGetAllCharsByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{0}
}
func (m *QueryGetAllCharsByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsByCreatorRequest.Merge(m, src)
}
func (m *QueryGetAllCharsByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsByCreatorRequest proto.InternalMessageInfo

func (m *QueryGetAllCharsByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetAllCharsByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsByCreatorResponse struct {
	Character  []*Character        `protobuf:"bytes,1,rep,name=Character,proto3" json:"Character,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsByCreatorResponse) Reset()         { *m = QueryGetAllCharsByCreatorResponse{} }
func (m *QueryGetAllCharsByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsByCreatorResponse) ProtoMessage()    {}
func (*QueryGetAllCharsByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{1}
}
func (m *QueryGetAllCharsByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsByCreatorResponse.Merge(m, src)
}
func (m *QueryGetAllCharsByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsByCreatorResponse proto.InternalMessageInfo

func (m *QueryGetAllCharsByCreatorResponse) GetCharacter() []*Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *QueryGetAllCharsByCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCharByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetCharByNameRequest) Reset()         { *m = QueryGetCharByNameRequest{} }
func (m *QueryGetCharByNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCharByNameRequest) ProtoMessage()    {}
func (*QueryGetCharByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{2}
}
func (m *QueryGetCharByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCharByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCharByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCharByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCharByNameRequest.Merge(m, src)
}
func (m *QueryGetCharByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCharByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCharByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCharByNameRequest proto.InternalMessageInfo

func (m *QueryGetCharByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetCharByNameResponse struct {
	Character *Character `protobuf:"bytes,1,opt,name=Character,proto3" json:"Character,omitempty"`
}

func (m *QueryGetCharByNameResponse) Reset()         { *m = QueryGetCharByNameResponse{} }
func (m *QueryGetCharByNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCharByNameResponse) ProtoMessage()    {}
func (*QueryGetCharByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{3}
}
func (m *QueryGetCharByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCharByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCharByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCharByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCharByNameResponse.Merge(m, src)
}
func (m *QueryGetCharByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCharByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCharByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCharByNameResponse proto.InternalMessageInfo

func (m *QueryGetCharByNameResponse) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

type QueryGetAllCharsForSaleRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsForSaleRequest) Reset()         { *m = QueryGetAllCharsForSaleRequest{} }
func (m *QueryGetAllCharsForSaleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsForSaleRequest) ProtoMessage()    {}
func (*QueryGetAllCharsForSaleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{4}
}
func (m *QueryGetAllCharsForSaleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsForSaleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsForSaleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsForSaleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsForSaleRequest.Merge(m, src)
}
func (m *QueryGetAllCharsForSaleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsForSaleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsForSaleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsForSaleRequest proto.InternalMessageInfo

func (m *QueryGetAllCharsForSaleRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsForSaleResponse struct {
	Character  []*Character        `protobuf:"bytes,1,rep,name=Character,proto3" json:"Character,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsForSaleResponse) Reset()         { *m = QueryGetAllCharsForSaleResponse{} }
func (m *QueryGetAllCharsForSaleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsForSaleResponse) ProtoMessage()    {}
func (*QueryGetAllCharsForSaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{5}
}
func (m *QueryGetAllCharsForSaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsForSaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsForSaleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsForSaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsForSaleResponse.Merge(m, src)
}
func (m *QueryGetAllCharsForSaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsForSaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsForSaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsForSaleResponse proto.InternalMessageInfo

func (m *QueryGetAllCharsForSaleResponse) GetCharacter() []*Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *QueryGetAllCharsForSaleResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsOfTypeRequest struct {
	Ctype      string             `protobuf:"bytes,1,opt,name=ctype,proto3" json:"ctype,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsOfTypeRequest) Reset()         { *m = QueryGetAllCharsOfTypeRequest{} }
func (m *QueryGetAllCharsOfTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsOfTypeRequest) ProtoMessage()    {}
func (*QueryGetAllCharsOfTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{6}
}
func (m *QueryGetAllCharsOfTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsOfTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsOfTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsOfTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsOfTypeRequest.Merge(m, src)
}
func (m *QueryGetAllCharsOfTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsOfTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsOfTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsOfTypeRequest proto.InternalMessageInfo

func (m *QueryGetAllCharsOfTypeRequest) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *QueryGetAllCharsOfTypeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsOfTypeResponse struct {
	Character  []*Character        `protobuf:"bytes,1,rep,name=Character,proto3" json:"Character,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsOfTypeResponse) Reset()         { *m = QueryGetAllCharsOfTypeResponse{} }
func (m *QueryGetAllCharsOfTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsOfTypeResponse) ProtoMessage()    {}
func (*QueryGetAllCharsOfTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{7}
}
func (m *QueryGetAllCharsOfTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsOfTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsOfTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsOfTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsOfTypeResponse.Merge(m, src)
}
func (m *QueryGetAllCharsOfTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsOfTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsOfTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsOfTypeResponse proto.InternalMessageInfo

func (m *QueryGetAllCharsOfTypeResponse) GetCharacter() []*Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *QueryGetAllCharsOfTypeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsOfOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsOfOwnerRequest) Reset()         { *m = QueryGetAllCharsOfOwnerRequest{} }
func (m *QueryGetAllCharsOfOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsOfOwnerRequest) ProtoMessage()    {}
func (*QueryGetAllCharsOfOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{8}
}
func (m *QueryGetAllCharsOfOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsOfOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsOfOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsOfOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsOfOwnerRequest.Merge(m, src)
}
func (m *QueryGetAllCharsOfOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsOfOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsOfOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsOfOwnerRequest proto.InternalMessageInfo

func (m *QueryGetAllCharsOfOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryGetAllCharsOfOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCharsOfOwnerResponse struct {
	Character  []*Character        `protobuf:"bytes,1,rep,name=Character,proto3" json:"Character,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCharsOfOwnerResponse) Reset()         { *m = QueryGetAllCharsOfOwnerResponse{} }
func (m *QueryGetAllCharsOfOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCharsOfOwnerResponse) ProtoMessage()    {}
func (*QueryGetAllCharsOfOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{9}
}
func (m *QueryGetAllCharsOfOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCharsOfOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCharsOfOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCharsOfOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCharsOfOwnerResponse.Merge(m, src)
}
func (m *QueryGetAllCharsOfOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCharsOfOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCharsOfOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCharsOfOwnerResponse proto.InternalMessageInfo

func (m *QueryGetAllCharsOfOwnerResponse) GetCharacter() []*Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *QueryGetAllCharsOfOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCharacterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCharacterRequest) Reset()         { *m = QueryGetCharacterRequest{} }
func (m *QueryGetCharacterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCharacterRequest) ProtoMessage()    {}
func (*QueryGetCharacterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{10}
}
func (m *QueryGetCharacterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCharacterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCharacterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCharacterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCharacterRequest.Merge(m, src)
}
func (m *QueryGetCharacterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCharacterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCharacterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCharacterRequest proto.InternalMessageInfo

func (m *QueryGetCharacterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCharacterResponse struct {
	Character *Character `protobuf:"bytes,1,opt,name=Character,proto3" json:"Character,omitempty"`
}

func (m *QueryGetCharacterResponse) Reset()         { *m = QueryGetCharacterResponse{} }
func (m *QueryGetCharacterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCharacterResponse) ProtoMessage()    {}
func (*QueryGetCharacterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{11}
}
func (m *QueryGetCharacterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCharacterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCharacterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCharacterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCharacterResponse.Merge(m, src)
}
func (m *QueryGetCharacterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCharacterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCharacterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCharacterResponse proto.InternalMessageInfo

func (m *QueryGetCharacterResponse) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

type QueryAllCharacterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCharacterRequest) Reset()         { *m = QueryAllCharacterRequest{} }
func (m *QueryAllCharacterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCharacterRequest) ProtoMessage()    {}
func (*QueryAllCharacterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{12}
}
func (m *QueryAllCharacterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCharacterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCharacterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCharacterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCharacterRequest.Merge(m, src)
}
func (m *QueryAllCharacterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCharacterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCharacterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCharacterRequest proto.InternalMessageInfo

func (m *QueryAllCharacterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCharacterResponse struct {
	Character  []*Character        `protobuf:"bytes,1,rep,name=Character,proto3" json:"Character,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCharacterResponse) Reset()         { *m = QueryAllCharacterResponse{} }
func (m *QueryAllCharacterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCharacterResponse) ProtoMessage()    {}
func (*QueryAllCharacterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a2e418f0a31197, []int{13}
}
func (m *QueryAllCharacterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCharacterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCharacterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCharacterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCharacterResponse.Merge(m, src)
}
func (m *QueryAllCharacterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCharacterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCharacterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCharacterResponse proto.InternalMessageInfo

func (m *QueryAllCharacterResponse) GetCharacter() []*Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *QueryAllCharacterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAllCharsByCreatorRequest)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsByCreatorRequest")
	proto.RegisterType((*QueryGetAllCharsByCreatorResponse)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsByCreatorResponse")
	proto.RegisterType((*QueryGetCharByNameRequest)(nil), "charactertoken.ctok.charservice.QueryGetCharByNameRequest")
	proto.RegisterType((*QueryGetCharByNameResponse)(nil), "charactertoken.ctok.charservice.QueryGetCharByNameResponse")
	proto.RegisterType((*QueryGetAllCharsForSaleRequest)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsForSaleRequest")
	proto.RegisterType((*QueryGetAllCharsForSaleResponse)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsForSaleResponse")
	proto.RegisterType((*QueryGetAllCharsOfTypeRequest)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsOfTypeRequest")
	proto.RegisterType((*QueryGetAllCharsOfTypeResponse)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsOfTypeResponse")
	proto.RegisterType((*QueryGetAllCharsOfOwnerRequest)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsOfOwnerRequest")
	proto.RegisterType((*QueryGetAllCharsOfOwnerResponse)(nil), "charactertoken.ctok.charservice.QueryGetAllCharsOfOwnerResponse")
	proto.RegisterType((*QueryGetCharacterRequest)(nil), "charactertoken.ctok.charservice.QueryGetCharacterRequest")
	proto.RegisterType((*QueryGetCharacterResponse)(nil), "charactertoken.ctok.charservice.QueryGetCharacterResponse")
	proto.RegisterType((*QueryAllCharacterRequest)(nil), "charactertoken.ctok.charservice.QueryAllCharacterRequest")
	proto.RegisterType((*QueryAllCharacterResponse)(nil), "charactertoken.ctok.charservice.QueryAllCharacterResponse")
}

func init() { proto.RegisterFile("charservice/query.proto", fileDescriptor_f3a2e418f0a31197) }

var fileDescriptor_f3a2e418f0a31197 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0x86, 0x7b, 0x85, 0x82, 0x7a, 0x85, 0x81, 0x53, 0x25, 0x82, 0x01, 0x37, 0x78, 0x80, 0xaa,
	0x42, 0x76, 0xeb, 0x52, 0x10, 0xad, 0xa0, 0x24, 0x91, 0x5a, 0x06, 0x44, 0x21, 0x30, 0xb1, 0x5d,
	0xcc, 0xd5, 0xb1, 0xea, 0xf8, 0x5c, 0xfb, 0x52, 0x1a, 0xa1, 0x32, 0x20, 0x7e, 0x00, 0x12, 0x3f,
	0x82, 0x8d, 0x05, 0x84, 0xc4, 0x82, 0x18, 0x19, 0x23, 0xc1, 0xc0, 0xc0, 0x80, 0x12, 0x7e, 0x08,
	0xb2, 0x7d, 0x76, 0xec, 0xc4, 0x90, 0xd8, 0x64, 0xc8, 0xd6, 0xab, 0xef, 0xfb, 0xee, 0x79, 0xdf,
	0xcf, 0xbe, 0xb7, 0x85, 0x67, 0xb5, 0x3a, 0x76, 0x5c, 0xe2, 0x1c, 0x18, 0x1a, 0x51, 0xf6, 0x9b,
	0xc4, 0x69, 0xc9, 0xb6, 0x43, 0x19, 0x45, 0x0b, 0xde, 0x03, 0xac, 0x31, 0xe2, 0x30, 0xba, 0x47,
	0x2c, 0x59, 0x63, 0x74, 0x4f, 0x8e, 0x6d, 0x16, 0x2e, 0xe8, 0x94, 0xea, 0x26, 0x51, 0xb0, 0x6d,
	0x28, 0xd8, 0xb2, 0x28, 0xc3, 0xcc, 0xa0, 0x96, 0x1b, 0x94, 0x0b, 0x4b, 0x1a, 0x75, 0x1b, 0xd4,
	0x55, 0x6a, 0xd8, 0xe5, 0x7d, 0x95, 0x83, 0x95, 0x1a, 0x61, 0x78, 0x45, 0xb1, 0xb1, 0x6e, 0x58,
	0xfe, 0x66, 0xbe, 0xf7, 0x7c, 0x9c, 0x21, 0x3a, 0x36, 0x78, 0x28, 0xbd, 0x02, 0xb0, 0xf8, 0xd0,
	0xab, 0xdf, 0x26, 0xac, 0x64, 0x9a, 0x15, 0x6f, 0x6b, 0xb9, 0x55, 0x71, 0x08, 0x66, 0xd4, 0xa9,
	0x92, 0xfd, 0x26, 0x71, 0x19, 0x2a, 0xc0, 0x93, 0x5a, 0xf0, 0x9b, 0x02, 0x28, 0x82, 0xc5, 0xd9,
	0x6a, 0xb8, 0x44, 0x5b, 0x10, 0xf6, 0xce, 0x2b, 0x4c, 0x17, 0xc1, 0xe2, 0x9c, 0x7a, 0x59, 0x0e,
	0xe0, 0x64, 0x0f, 0x4e, 0x0e, 0x44, 0x73, 0x38, 0xf9, 0x01, 0xd6, 0x09, 0xef, 0x5a, 0x8d, 0x55,
	0x4a, 0x1f, 0x01, 0xbc, 0xf4, 0x0f, 0x0c, 0xd7, 0xa6, 0x96, 0x4b, 0xd0, 0x5d, 0x38, 0x5b, 0x09,
	0xf9, 0x0b, 0xa0, 0x78, 0x6c, 0x71, 0x4e, 0x5d, 0x92, 0x87, 0x18, 0x29, 0x47, 0x15, 0xd5, 0x5e,
	0x31, 0xda, 0x4e, 0xe1, 0xbe, 0x32, 0x94, 0x3b, 0xc0, 0x48, 0x80, 0x2b, 0xf0, 0x5c, 0xc8, 0xed,
	0x75, 0x2f, 0xb7, 0xee, 0xe3, 0x46, 0xa8, 0x10, 0x21, 0x78, 0xdc, 0xc2, 0x0d, 0xc2, 0x4d, 0xf3,
	0x7f, 0x96, 0x76, 0xa1, 0x90, 0x56, 0x90, 0xae, 0x10, 0xe4, 0x56, 0x28, 0xd5, 0xa1, 0xd8, 0x6f,
	0xe8, 0x16, 0x75, 0x1e, 0x61, 0x33, 0xa2, 0x4b, 0xce, 0x0e, 0xe4, 0x9e, 0xdd, 0x07, 0x00, 0x17,
	0xfe, 0x7a, 0xd4, 0xe4, 0x4e, 0xee, 0x08, 0x5e, 0xec, 0xa7, 0xde, 0xd9, 0x7d, 0xdc, 0xb2, 0x23,
	0x7f, 0xe6, 0xe1, 0x8c, 0xc6, 0x5a, 0x76, 0x38, 0xbe, 0x60, 0x31, 0xb6, 0x37, 0xfe, 0x3d, 0x18,
	0x1c, 0x50, 0x78, 0xfe, 0xe4, 0x9a, 0xf6, 0x22, 0x0d, 0x7a, 0xe7, 0x99, 0x45, 0x9c, 0x98, 0x6b,
	0xd4, 0x5b, 0x87, 0xae, 0xf9, 0x8b, 0xb1, 0xb9, 0x96, 0xf6, 0xae, 0x45, 0x00, 0x93, 0x6b, 0xdb,
	0x32, 0x2c, 0xc4, 0x3f, 0xfa, 0xe0, 0xa0, 0x9e, 0x61, 0x86, 0xf5, 0x94, 0x1c, 0x86, 0x86, 0xf9,
	0x0b, 0x89, 0x24, 0xef, 0x15, 0x5e, 0x31, 0xf6, 0x5b, 0xa2, 0xc6, 0xc1, 0xb8, 0x97, 0x09, 0xb0,
	0x71, 0xdd, 0x0f, 0xef, 0x00, 0xd7, 0x92, 0x3c, 0x64, 0x62, 0xa7, 0xa5, 0xbe, 0x9d, 0x83, 0x33,
	0x3e, 0x30, 0xfa, 0x09, 0xe0, 0x7c, 0x5a, 0x22, 0xa1, 0xd2, 0x50, 0xc4, 0x61, 0xa1, 0x2a, 0x94,
	0xff, 0xa7, 0x45, 0x40, 0x2d, 0xdd, 0x7a, 0xf9, 0xed, 0xf7, 0x9b, 0xe9, 0x1b, 0x68, 0x4d, 0x49,
	0xf6, 0x52, 0xbc, 0x5e, 0x4a, 0x3c, 0xf7, 0xf5, 0x34, 0x15, 0x5f, 0x00, 0x3c, 0x9d, 0xc8, 0x21,
	0xb4, 0x3e, 0x32, 0xd4, 0x40, 0xda, 0x09, 0x1b, 0xb9, 0x6a, 0xb9, 0x92, 0xeb, 0xbe, 0x92, 0x65,
	0x24, 0x8f, 0xa2, 0x24, 0x06, 0xfc, 0x1d, 0x40, 0x34, 0x98, 0x3b, 0x68, 0x33, 0xb3, 0xb9, 0xc9,
	0x70, 0x14, 0xee, 0xe4, 0x6f, 0xc0, 0x15, 0x6d, 0xf8, 0x8a, 0xd6, 0xd0, 0x6a, 0x96, 0xd9, 0x84,
	0xfc, 0x6d, 0x00, 0xcf, 0x0c, 0x04, 0x03, 0xba, 0x9d, 0x19, 0x2a, 0x91, 0x68, 0xc2, 0x66, 0xee,
	0x7a, 0xae, 0x69, 0xdd, 0xd7, 0x74, 0x0d, 0xa9, 0x59, 0x34, 0x71, 0xf8, 0xbe, 0x49, 0xf1, 0x5b,
	0x1b, 0xe5, 0x61, 0x8a, 0x07, 0x4e, 0x8e, 0x49, 0xf5, 0x05, 0x46, 0xbe, 0x49, 0x85, 0xfc, 0x9f,
	0x41, 0xec, 0x02, 0x43, 0x37, 0x33, 0x7d, 0x03, 0xf1, 0xeb, 0x56, 0x58, 0xcf, 0x53, 0x9a, 0x79,
	0x2e, 0xd1, 0x73, 0xe5, 0xb9, 0x1f, 0x34, 0x47, 0xe8, 0x13, 0x80, 0xa7, 0xa2, 0x8e, 0x25, 0xd3,
	0x1c, 0x55, 0x43, 0x4a, 0x64, 0x8c, 0xaa, 0x21, 0x2d, 0x08, 0x24, 0xd5, 0xd7, 0x70, 0x15, 0x2d,
	0x8d, 0xae, 0xa1, 0x7c, 0xef, 0x6b, 0x47, 0x04, 0xed, 0x8e, 0x08, 0x7e, 0x75, 0x44, 0xf0, 0xba,
	0x2b, 0x4e, 0xb5, 0xbb, 0xe2, 0xd4, 0x8f, 0xae, 0x38, 0xf5, 0x44, 0xd5, 0x0d, 0x56, 0x6f, 0xd6,
	0x64, 0x8d, 0x36, 0x52, 0xfb, 0x1d, 0x26, 0x3a, 0x7a, 0x7f, 0xd9, 0xb9, 0xb5, 0x13, 0xfe, 0xbf,
	0x44, 0xab, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x6a, 0x6e, 0x10, 0xb5, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of getAllCharsByCreator items.
	GetAllCharsByCreator(ctx context.Context, in *QueryGetAllCharsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetAllCharsByCreatorResponse, error)
	// Queries a list of getCharByName items.
	GetCharByName(ctx context.Context, in *QueryGetCharByNameRequest, opts ...grpc.CallOption) (*QueryGetCharByNameResponse, error)
	// Queries a list of getAllCharsForSale items.
	GetAllCharsForSale(ctx context.Context, in *QueryGetAllCharsForSaleRequest, opts ...grpc.CallOption) (*QueryGetAllCharsForSaleResponse, error)
	// Queries a list of getAllCharsOfType items.
	GetAllCharsOfType(ctx context.Context, in *QueryGetAllCharsOfTypeRequest, opts ...grpc.CallOption) (*QueryGetAllCharsOfTypeResponse, error)
	// Queries a list of getAllCharsOfOwner items.
	GetAllCharsOfOwner(ctx context.Context, in *QueryGetAllCharsOfOwnerRequest, opts ...grpc.CallOption) (*QueryGetAllCharsOfOwnerResponse, error)
	// Queries a character by index.
	Character(ctx context.Context, in *QueryGetCharacterRequest, opts ...grpc.CallOption) (*QueryGetCharacterResponse, error)
	// Queries a list of character items.
	CharacterAll(ctx context.Context, in *QueryAllCharacterRequest, opts ...grpc.CallOption) (*QueryAllCharacterResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllCharsByCreator(ctx context.Context, in *QueryGetAllCharsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetAllCharsByCreatorResponse, error) {
	out := new(QueryGetAllCharsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/GetAllCharsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCharByName(ctx context.Context, in *QueryGetCharByNameRequest, opts ...grpc.CallOption) (*QueryGetCharByNameResponse, error) {
	out := new(QueryGetCharByNameResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/GetCharByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllCharsForSale(ctx context.Context, in *QueryGetAllCharsForSaleRequest, opts ...grpc.CallOption) (*QueryGetAllCharsForSaleResponse, error) {
	out := new(QueryGetAllCharsForSaleResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/GetAllCharsForSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllCharsOfType(ctx context.Context, in *QueryGetAllCharsOfTypeRequest, opts ...grpc.CallOption) (*QueryGetAllCharsOfTypeResponse, error) {
	out := new(QueryGetAllCharsOfTypeResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/GetAllCharsOfType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllCharsOfOwner(ctx context.Context, in *QueryGetAllCharsOfOwnerRequest, opts ...grpc.CallOption) (*QueryGetAllCharsOfOwnerResponse, error) {
	out := new(QueryGetAllCharsOfOwnerResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/GetAllCharsOfOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Character(ctx context.Context, in *QueryGetCharacterRequest, opts ...grpc.CallOption) (*QueryGetCharacterResponse, error) {
	out := new(QueryGetCharacterResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/Character", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CharacterAll(ctx context.Context, in *QueryAllCharacterRequest, opts ...grpc.CallOption) (*QueryAllCharacterResponse, error) {
	out := new(QueryAllCharacterResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Query/CharacterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of getAllCharsByCreator items.
	GetAllCharsByCreator(context.Context, *QueryGetAllCharsByCreatorRequest) (*QueryGetAllCharsByCreatorResponse, error)
	// Queries a list of getCharByName items.
	GetCharByName(context.Context, *QueryGetCharByNameRequest) (*QueryGetCharByNameResponse, error)
	// Queries a list of getAllCharsForSale items.
	GetAllCharsForSale(context.Context, *QueryGetAllCharsForSaleRequest) (*QueryGetAllCharsForSaleResponse, error)
	// Queries a list of getAllCharsOfType items.
	GetAllCharsOfType(context.Context, *QueryGetAllCharsOfTypeRequest) (*QueryGetAllCharsOfTypeResponse, error)
	// Queries a list of getAllCharsOfOwner items.
	GetAllCharsOfOwner(context.Context, *QueryGetAllCharsOfOwnerRequest) (*QueryGetAllCharsOfOwnerResponse, error)
	// Queries a character by index.
	Character(context.Context, *QueryGetCharacterRequest) (*QueryGetCharacterResponse, error)
	// Queries a list of character items.
	CharacterAll(context.Context, *QueryAllCharacterRequest) (*QueryAllCharacterResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllCharsByCreator(ctx context.Context, req *QueryGetAllCharsByCreatorRequest) (*QueryGetAllCharsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCharsByCreator not implemented")
}
func (*UnimplementedQueryServer) GetCharByName(ctx context.Context, req *QueryGetCharByNameRequest) (*QueryGetCharByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharByName not implemented")
}
func (*UnimplementedQueryServer) GetAllCharsForSale(ctx context.Context, req *QueryGetAllCharsForSaleRequest) (*QueryGetAllCharsForSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCharsForSale not implemented")
}
func (*UnimplementedQueryServer) GetAllCharsOfType(ctx context.Context, req *QueryGetAllCharsOfTypeRequest) (*QueryGetAllCharsOfTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCharsOfType not implemented")
}
func (*UnimplementedQueryServer) GetAllCharsOfOwner(ctx context.Context, req *QueryGetAllCharsOfOwnerRequest) (*QueryGetAllCharsOfOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCharsOfOwner not implemented")
}
func (*UnimplementedQueryServer) Character(ctx context.Context, req *QueryGetCharacterRequest) (*QueryGetCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Character not implemented")
}
func (*UnimplementedQueryServer) CharacterAll(ctx context.Context, req *QueryAllCharacterRequest) (*QueryAllCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllCharsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCharsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCharsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/GetAllCharsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCharsByCreator(ctx, req.(*QueryGetAllCharsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCharByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCharByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCharByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/GetCharByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCharByName(ctx, req.(*QueryGetCharByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllCharsForSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCharsForSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCharsForSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/GetAllCharsForSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCharsForSale(ctx, req.(*QueryGetAllCharsForSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllCharsOfType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCharsOfTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCharsOfType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/GetAllCharsOfType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCharsOfType(ctx, req.(*QueryGetAllCharsOfTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllCharsOfOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCharsOfOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCharsOfOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/GetAllCharsOfOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCharsOfOwner(ctx, req.(*QueryGetAllCharsOfOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Character_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Character(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/Character",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Character(ctx, req.(*QueryGetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CharacterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CharacterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Query/CharacterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CharacterAll(ctx, req.(*QueryAllCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charactertoken.ctok.charservice.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCharsByCreator",
			Handler:    _Query_GetAllCharsByCreator_Handler,
		},
		{
			MethodName: "GetCharByName",
			Handler:    _Query_GetCharByName_Handler,
		},
		{
			MethodName: "GetAllCharsForSale",
			Handler:    _Query_GetAllCharsForSale_Handler,
		},
		{
			MethodName: "GetAllCharsOfType",
			Handler:    _Query_GetAllCharsOfType_Handler,
		},
		{
			MethodName: "GetAllCharsOfOwner",
			Handler:    _Query_GetAllCharsOfOwner_Handler,
		},
		{
			MethodName: "Character",
			Handler:    _Query_Character_Handler,
		},
		{
			MethodName: "CharacterAll",
			Handler:    _Query_CharacterAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charservice/query.proto",
}

func (m *QueryGetAllCharsByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Character) > 0 {
		for iNdEx := len(m.Character) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Character[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCharByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCharByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCharByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCharByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCharByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCharByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsForSaleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsForSaleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsForSaleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsForSaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsForSaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsForSaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Character) > 0 {
		for iNdEx := len(m.Character) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Character[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsOfTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsOfTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsOfTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ctype) > 0 {
		i -= len(m.Ctype)
		copy(dAtA[i:], m.Ctype)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ctype)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsOfTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsOfTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsOfTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Character) > 0 {
		for iNdEx := len(m.Character) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Character[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsOfOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsOfOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsOfOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCharsOfOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCharsOfOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCharsOfOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Character) > 0 {
		for iNdEx := len(m.Character) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Character[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCharacterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCharacterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCharacterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCharacterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCharacterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCharacterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Character != nil {
		{
			size, err := m.Character.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCharacterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCharacterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCharacterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCharacterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCharacterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCharacterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Character) > 0 {
		for iNdEx := len(m.Character) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Character[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAllCharsByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Character) > 0 {
		for _, e := range m.Character {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCharByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCharByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsForSaleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsForSaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Character) > 0 {
		for _, e := range m.Character {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsOfTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ctype)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsOfTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Character) > 0 {
		for _, e := range m.Character {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsOfOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCharsOfOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Character) > 0 {
		for _, e := range m.Character {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCharacterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCharacterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Character != nil {
		l = m.Character.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCharacterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCharacterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Character) > 0 {
		for _, e := range m.Character {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAllCharsByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = append(m.Character, &Character{})
			if err := m.Character[len(m.Character)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCharByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCharByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCharByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCharByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCharByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCharByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &Character{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsForSaleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsForSaleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsForSaleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsForSaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsForSaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsForSaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = append(m.Character, &Character{})
			if err := m.Character[len(m.Character)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsOfTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsOfTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsOfTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsOfTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsOfTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsOfTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = append(m.Character, &Character{})
			if err := m.Character[len(m.Character)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsOfOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsOfOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsOfOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCharsOfOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCharsOfOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCharsOfOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = append(m.Character, &Character{})
			if err := m.Character[len(m.Character)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCharacterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCharacterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCharacterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCharacterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCharacterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCharacterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Character == nil {
				m.Character = &Character{}
			}
			if err := m.Character.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCharacterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCharacterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCharacterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCharacterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCharacterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCharacterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = append(m.Character, &Character{})
			if err := m.Character[len(m.Character)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charservice/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgUnlistSale struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgUnlistSale) Reset()         { *m = MsgUnlistSale{} }
func (m *MsgUnlistSale) String() string { return proto.CompactTextString(m) }
func (*MsgUnlistSale) ProtoMessage()    {}
func (*MsgUnlistSale) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{0}
}
func (m *MsgUnlistSale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlistSale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlistSale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlistSale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlistSale.Merge(m, src)
}
func (m *MsgUnlistSale) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlistSale) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlistSale.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlistSale proto.InternalMessageInfo

func (m *MsgUnlistSale) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnlistSale) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgUnlistSaleResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgUnlistSaleResponse) Reset()         { *m = MsgUnlistSaleResponse{} }
func (m *MsgUnlistSaleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlistSaleResponse) ProtoMessage()    {}
func (*MsgUnlistSaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{1}
}
func (m *MsgUnlistSaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlistSaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlistSaleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlistSaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlistSaleResponse.Merge(m, src)
}
func (m *MsgUnlistSaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlistSaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlistSaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlistSaleResponse proto.InternalMessageInfo

func (m *MsgUnlistSaleResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgSetSale struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index           string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Cost            string `protobuf:"bytes,3,opt,name=cost,proto3" json:"cost,omitempty"`
	SaleTimeMinutes int64  `protobuf:"varint,4,opt,name=saleTimeMinutes,proto3" json:"saleTimeMinutes,omitempty"`
}

func (m *MsgSetSale) Reset()         { *m = MsgSetSale{} }
func (m *MsgSetSale) String() string { return proto.CompactTextString(m) }
func (*MsgSetSale) ProtoMessage()    {}
func (*MsgSetSale) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{2}
}
func (m *MsgSetSale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSale.Merge(m, src)
}
func (m *MsgSetSale) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSale) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSale.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSale proto.InternalMessageInfo

func (m *MsgSetSale) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetSale) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgSetSale) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *MsgSetSale) GetSaleTimeMinutes() int64 {
	if m != nil {
		return m.SaleTimeMinutes
	}
	return 0
}

type MsgSetSaleResponse struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	SaleEndTime string `protobuf:"bytes,2,opt,name=saleEndTime,proto3" json:"saleEndTime,omitempty"`
}

func (m *MsgSetSaleResponse) Reset()         { *m = MsgSetSaleResponse{} }
func (m *MsgSetSaleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetSaleResponse) ProtoMessage()    {}
func (*MsgSetSaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{3}
}
func (m *MsgSetSaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSaleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSaleResponse.Merge(m, src)
}
func (m *MsgSetSaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSaleResponse proto.InternalMessageInfo

func (m *MsgSetSaleResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgSetSaleResponse) GetSaleEndTime() string {
	if m != nil {
		return m.SaleEndTime
	}
	return ""
}

type MsgBuyChar struct {
	TradeRestricted bool   `protobuf:"varint,1,opt,name=tradeRestricted,proto3" json:"tradeRestricted,omitempty"`
	SaleTimeMinutes int64  `protobuf:"varint,2,opt,name=saleTimeMinutes,proto3" json:"saleTimeMinutes,omitempty"`
	Creator         string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CharType        string `protobuf:"bytes,5,opt,name=charType,proto3" json:"charType,omitempty"`
	Cost            string `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
	Index           string `protobuf:"bytes,7,opt,name=index,proto3" json:"index,omitempty"`
	License         string `protobuf:"bytes,8,opt,name=license,proto3" json:"license,omitempty"`
	Value           []byte `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgBuyChar) Reset()         { *m = MsgBuyChar{} }
func (m *MsgBuyChar) String() string { return proto.CompactTextString(m) }
func (*MsgBuyChar) ProtoMessage()    {}
func (*MsgBuyChar) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{4}
}
func (m *MsgBuyChar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyChar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyChar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyChar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyChar.Merge(m, src)
}
func (m *MsgBuyChar) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyChar) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyChar.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyChar proto.InternalMessageInfo

func (m *MsgBuyChar) GetTradeRestricted() bool {
	if m != nil {
		return m.TradeRestricted
	}
	return false
}

func (m *MsgBuyChar) GetSaleTimeMinutes() int64 {
	if m != nil {
		return m.SaleTimeMinutes
	}
	return 0
}

func (m *MsgBuyChar) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuyChar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgBuyChar) GetCharType() string {
	if m != nil {
		return m.CharType
	}
	return ""
}

func (m *MsgBuyChar) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *MsgBuyChar) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgBuyChar) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *MsgBuyChar) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MsgBuyCharResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgBuyCharResponse) Reset()         { *m = MsgBuyCharResponse{} }
func (m *MsgBuyCharResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCharResponse) ProtoMessage()    {}
func (*MsgBuyCharResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e82222b5ea387557, []int{5}
}
func (m *MsgBuyCharResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCharResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCharResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCharResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCharResponse.Merge(m, src)
}
func (m *MsgBuyCharResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCharResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCharResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCharResponse proto.InternalMessageInfo

func (m *MsgBuyCharResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUnlistSale)(nil), "charactertoken.ctok.charservice.MsgUnlistSale")
	proto.RegisterType((*MsgUnlistSaleResponse)(nil), "charactertoken.ctok.charservice.MsgUnlistSaleResponse")
	proto.RegisterType((*MsgSetSale)(nil), "charactertoken.ctok.charservice.MsgSetSale")
	proto.RegisterType((*MsgSetSaleResponse)(nil), "charactertoken.ctok.charservice.MsgSetSaleResponse")
	proto.RegisterType((*MsgBuyChar)(nil), "charactertoken.ctok.charservice.MsgBuyChar")
	proto.RegisterType((*MsgBuyCharResponse)(nil), "charactertoken.ctok.charservice.MsgBuyCharResponse")
}

func init() { proto.RegisterFile("charservice/tx.proto", fileDescriptor_e82222b5ea387557) }

var fileDescriptor_e82222b5ea387557 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6b, 0x1a, 0x41,
	0x18, 0x75, 0xd5, 0x44, 0xfd, 0xda, 0x52, 0x18, 0x52, 0x18, 0x3c, 0x6c, 0x65, 0x4f, 0xd2, 0xd2,
	0x5d, 0x48, 0xa0, 0xd7, 0x42, 0x4a, 0x6f, 0xf1, 0xb2, 0x49, 0x2f, 0xbd, 0x4d, 0xc6, 0x0f, 0x1d,
	0x5c, 0x67, 0x64, 0x66, 0x0c, 0xda, 0x73, 0x7f, 0x40, 0x7f, 0x56, 0x8f, 0xb9, 0x14, 0x7a, 0x2c,
	0xfa, 0x47, 0xca, 0x8c, 0xab, 0x99, 0x95, 0x90, 0x6a, 0x6e, 0xfb, 0x3d, 0x9e, 0xef, 0xbd, 0xef,
	0xf9, 0x31, 0x70, 0xc6, 0xc7, 0x4c, 0x1b, 0xd4, 0x77, 0x82, 0x63, 0x66, 0x17, 0xe9, 0x4c, 0x2b,
	0xab, 0xc8, 0x5b, 0x87, 0x32, 0x6e, 0x51, 0x5b, 0x35, 0x41, 0x99, 0x72, 0xab, 0x26, 0x69, 0xc0,
	0x4c, 0x3e, 0xc1, 0xab, 0x81, 0x19, 0x7d, 0x95, 0x85, 0x30, 0xf6, 0x9a, 0x15, 0x48, 0x28, 0xb4,
	0xb8, 0x46, 0x66, 0x95, 0xa6, 0x51, 0x2f, 0xea, 0x77, 0xf2, 0xed, 0x48, 0xce, 0xe0, 0x44, 0xc8,
	0x21, 0x2e, 0x68, 0xdd, 0xe3, 0x9b, 0x21, 0xf9, 0x00, 0x6f, 0x2a, 0x02, 0x39, 0x9a, 0x99, 0x92,
	0x06, 0x1f, 0xe8, 0x51, 0x48, 0xff, 0x0e, 0x30, 0x30, 0xa3, 0x6b, 0x7c, 0x96, 0x19, 0x21, 0xd0,
	0xe4, 0xca, 0x58, 0xda, 0xf0, 0xa0, 0xff, 0x26, 0x7d, 0x78, 0x6d, 0x58, 0x81, 0x37, 0x62, 0x8a,
	0x03, 0x21, 0xe7, 0x16, 0x0d, 0x6d, 0xf6, 0xa2, 0x7e, 0x23, 0xdf, 0x87, 0x93, 0x2b, 0x20, 0x0f,
	0xde, 0x4f, 0xe7, 0x24, 0x3d, 0x78, 0xe1, 0x7e, 0xfe, 0x45, 0x0e, 0x9d, 0x42, 0x99, 0x22, 0x84,
	0x92, 0x1f, 0x75, 0xbf, 0xca, 0xe5, 0x7c, 0xf9, 0x79, 0xcc, 0xb4, 0x8b, 0x61, 0x35, 0x1b, 0x3a,
	0x5d, 0xab, 0x05, 0xb7, 0x38, 0xf4, 0x82, 0xed, 0x7c, 0x1f, 0x7e, 0x2c, 0x70, 0xfd, 0xd1, 0xc0,
	0x61, 0x3d, 0x8d, 0x6a, 0x3d, 0x04, 0x9a, 0x92, 0x4d, 0xd1, 0x6f, 0xda, 0xc9, 0xfd, 0x37, 0xe9,
	0x42, 0xdb, 0xfd, 0xb3, 0x37, 0xcb, 0x19, 0xd2, 0x13, 0x8f, 0xef, 0xe6, 0x5d, 0x71, 0xa7, 0x41,
	0x71, 0xbb, 0xc5, 0x5b, 0xe1, 0xe2, 0x14, 0x5a, 0x85, 0xe0, 0x28, 0x0d, 0xd2, 0xf6, 0xc6, 0xb3,
	0x1c, 0x1d, 0xff, 0x8e, 0x15, 0x73, 0xa4, 0x9d, 0x5e, 0xd4, 0x7f, 0x99, 0x6f, 0x86, 0xe4, 0x9d,
	0x2f, 0xb5, 0x6c, 0xe1, 0xe9, 0x52, 0xcf, 0x7f, 0xd7, 0xa1, 0x31, 0x30, 0x23, 0x62, 0x01, 0x82,
	0x8b, 0x4b, 0xd3, 0xff, 0x1c, 0x69, 0x5a, 0x39, 0xb0, 0xee, 0xc7, 0xe3, 0xf8, 0xbb, 0x4c, 0x13,
	0x68, 0x6d, 0xef, 0xee, 0xfd, 0x21, 0x12, 0x25, 0xb9, 0x7b, 0x71, 0x04, 0x39, 0x34, 0xdb, 0x5e,
	0xc6, 0x41, 0x66, 0x25, 0xf9, 0x30, 0xb3, 0xbd, 0xb6, 0x2f, 0xaf, 0x7e, 0xad, 0xe2, 0xe8, 0x7e,
	0x15, 0x47, 0x7f, 0x57, 0x71, 0xf4, 0x73, 0x1d, 0xd7, 0xee, 0xd7, 0x71, 0xed, 0xcf, 0x3a, 0xae,
	0x7d, 0x3b, 0x1f, 0x09, 0x3b, 0x9e, 0xdf, 0xa6, 0x5c, 0x4d, 0xb3, 0xaa, 0x70, 0xe6, 0x84, 0xb3,
	0x45, 0x56, 0x79, 0x36, 0x96, 0x33, 0x34, 0xb7, 0xa7, 0xfe, 0xe9, 0xb8, 0xf8, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0xea, 0x70, 0x61, 0x52, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UnlistSale(ctx context.Context, in *MsgUnlistSale, opts ...grpc.CallOption) (*MsgUnlistSaleResponse, error)
	SetSale(ctx context.Context, in *MsgSetSale, opts ...grpc.CallOption) (*MsgSetSaleResponse, error)
	BuyChar(ctx context.Context, in *MsgBuyChar, opts ...grpc.CallOption) (*MsgBuyCharResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UnlistSale(ctx context.Context, in *MsgUnlistSale, opts ...grpc.CallOption) (*MsgUnlistSaleResponse, error) {
	out := new(MsgUnlistSaleResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Msg/UnlistSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSale(ctx context.Context, in *MsgSetSale, opts ...grpc.CallOption) (*MsgSetSaleResponse, error) {
	out := new(MsgSetSaleResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Msg/SetSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyChar(ctx context.Context, in *MsgBuyChar, opts ...grpc.CallOption) (*MsgBuyCharResponse, error) {
	out := new(MsgBuyCharResponse)
	err := c.cc.Invoke(ctx, "/charactertoken.ctok.charservice.Msg/BuyChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UnlistSale(context.Context, *MsgUnlistSale) (*MsgUnlistSaleResponse, error)
	SetSale(context.Context, *MsgSetSale) (*MsgSetSaleResponse, error)
	BuyChar(context.Context, *MsgBuyChar) (*MsgBuyCharResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UnlistSale(ctx context.Context, req *MsgUnlistSale) (*MsgUnlistSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlistSale not implemented")
}
func (*UnimplementedMsgServer) SetSale(ctx context.Context, req *MsgSetSale) (*MsgSetSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSale not implemented")
}
func (*UnimplementedMsgServer) BuyChar(ctx context.Context, req *MsgBuyChar) (*MsgBuyCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyChar not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UnlistSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlistSale)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlistSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Msg/UnlistSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlistSale(ctx, req.(*MsgUnlistSale))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetSale)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Msg/SetSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSale(ctx, req.(*MsgSetSale))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyChar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charactertoken.ctok.charservice.Msg/BuyChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyChar(ctx, req.(*MsgBuyChar))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charactertoken.ctok.charservice.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnlistSale",
			Handler:    _Msg_UnlistSale_Handler,
		},
		{
			MethodName: "SetSale",
			Handler:    _Msg_SetSale_Handler,
		},
		{
			MethodName: "BuyChar",
			Handler:    _Msg_BuyChar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charservice/tx.proto",
}

func (m *MsgUnlistSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlistSale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlistSale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlistSaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlistSaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlistSaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleTimeMinutes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleTimeMinutes))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SaleEndTime) > 0 {
		i -= len(m.SaleEndTime)
		copy(dAtA[i:], m.SaleEndTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SaleEndTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyChar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyChar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyChar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintTx(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CharType) > 0 {
		i -= len(m.CharType)
		copy(dAtA[i:], m.CharType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CharType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SaleTimeMinutes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleTimeMinutes))
		i--
		dAtA[i] = 0x10
	}
	if m.TradeRestricted {
		i--
		if m.TradeRestricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyCharResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCharResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCharResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUnlistSale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnlistSaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetSale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SaleTimeMinutes != 0 {
		n += 1 + sovTx(uint64(m.SaleTimeMinutes))
	}
	return n
}

func (m *MsgSetSaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SaleEndTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyChar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeRestricted {
		n += 2
	}
	if m.SaleTimeMinutes != 0 {
		n += 1 + sovTx(uint64(m.SaleTimeMinutes))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CharType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyCharResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUnlistSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlistSale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlistSale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlistSaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlistSaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlistSaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleTimeMinutes", wireType)
			}
			m.SaleTimeMinutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleTimeMinutes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaleEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyChar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyChar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyChar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeRestricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TradeRestricted = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleTimeMinutes", wireType)
			}
			m.SaleTimeMinutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleTimeMinutes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CharType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCharResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCharResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCharResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

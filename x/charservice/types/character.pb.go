// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charservice/character.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Character struct {
	TradeRestricted bool   `protobuf:"varint,1,opt,name=tradeRestricted,proto3" json:"tradeRestricted,omitempty"`
	SaleTime        int64  `protobuf:"varint,2,opt,name=saleTime,proto3" json:"saleTime,omitempty"`
	Creator         string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Index           string `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Name            string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Owner           string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Ctype           string `protobuf:"bytes,7,opt,name=ctype,proto3" json:"ctype,omitempty"`
	Cost            string `protobuf:"bytes,8,opt,name=cost,proto3" json:"cost,omitempty"`
	License         string `protobuf:"bytes,9,opt,name=license,proto3" json:"license,omitempty"`
	Value           []byte `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Character) Reset()         { *m = Character{} }
func (m *Character) String() string { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()    {}
func (*Character) Descriptor() ([]byte, []int) {
	return fileDescriptor_135c0f57c23250c0, []int{0}
}
func (m *Character) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Character) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Character.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Character) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Character.Merge(m, src)
}
func (m *Character) XXX_Size() int {
	return m.Size()
}
func (m *Character) XXX_DiscardUnknown() {
	xxx_messageInfo_Character.DiscardUnknown(m)
}

var xxx_messageInfo_Character proto.InternalMessageInfo

func (m *Character) GetTradeRestricted() bool {
	if m != nil {
		return m.TradeRestricted
	}
	return false
}

func (m *Character) GetSaleTime() int64 {
	if m != nil {
		return m.SaleTime
	}
	return 0
}

func (m *Character) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Character) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Character) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *Character) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *Character) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Character) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Character)(nil), "charactertoken.ctok.charservice.Character")
}

func init() { proto.RegisterFile("charservice/character.proto", fileDescriptor_135c0f57c23250c0) }

var fileDescriptor_135c0f57c23250c0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x6a, 0xf3, 0x30,
	0x14, 0x86, 0xa3, 0xfc, 0x5b, 0x7c, 0xf0, 0x81, 0xc8, 0x20, 0x52, 0x50, 0x4d, 0x27, 0x4f, 0x16,
	0xb4, 0x77, 0xd0, 0xae, 0x9d, 0x4c, 0xa7, 0x6e, 0x8a, 0x7c, 0x70, 0x44, 0x6c, 0x2b, 0x48, 0x4a,
	0x9a, 0x5e, 0x40, 0xf7, 0x5e, 0x56, 0xc7, 0x8c, 0x1d, 0x8b, 0x7d, 0x23, 0x45, 0x52, 0x13, 0xd2,
	0x6e, 0xef, 0xf3, 0x70, 0x5e, 0x71, 0x38, 0xc2, 0x57, 0x72, 0x2d, 0x8c, 0x05, 0xb3, 0x57, 0x12,
	0xb8, 0xcf, 0x42, 0x3a, 0x30, 0xf9, 0xd6, 0x68, 0xa7, 0xc9, 0xf5, 0x59, 0x38, 0xbd, 0x81, 0x36,
	0x97, 0x4e, 0x6f, 0xf2, 0x8b, 0xc2, 0x72, 0x51, 0xe9, 0x4a, 0x87, 0x59, 0xee, 0x53, 0xac, 0xdd,
	0xbc, 0x0d, 0x71, 0xf2, 0x70, 0x6a, 0x92, 0x0c, 0xff, 0x77, 0x46, 0x94, 0x50, 0x80, 0x75, 0x46,
	0x49, 0x07, 0x25, 0x45, 0x29, 0xca, 0xe6, 0xc5, 0x5f, 0x4d, 0x96, 0x78, 0x6e, 0x45, 0x0d, 0x4f,
	0xaa, 0x01, 0x3a, 0x4c, 0x51, 0x36, 0x2a, 0xce, 0x4c, 0x28, 0x9e, 0x49, 0x03, 0xc2, 0x69, 0x43,
	0x47, 0x29, 0xca, 0x92, 0xe2, 0x84, 0x64, 0x81, 0x27, 0xaa, 0x2d, 0xe1, 0x40, 0xc7, 0xc1, 0x47,
	0x20, 0x04, 0x8f, 0x5b, 0xd1, 0x00, 0x9d, 0x04, 0x19, 0xb2, 0x9f, 0xd4, 0x2f, 0x2d, 0x18, 0x3a,
	0x8d, 0x93, 0x01, 0xbc, 0x95, 0xee, 0x75, 0x0b, 0x74, 0x16, 0x6d, 0x00, 0xdf, 0x97, 0xda, 0x3a,
	0x3a, 0x8f, 0x7d, 0x9f, 0xfd, 0x0e, 0xb5, 0x92, 0xd0, 0x5a, 0xa0, 0x49, 0xdc, 0xe1, 0x07, 0xfd,
	0x1b, 0x7b, 0x51, 0xef, 0x80, 0xe2, 0x14, 0x65, 0xff, 0x8a, 0x08, 0xf7, 0x8f, 0x1f, 0x1d, 0x43,
	0xc7, 0x8e, 0xa1, 0xaf, 0x8e, 0xa1, 0xf7, 0x9e, 0x0d, 0x8e, 0x3d, 0x1b, 0x7c, 0xf6, 0x6c, 0xf0,
	0x7c, 0x5b, 0x29, 0xb7, 0xde, 0xad, 0x72, 0xa9, 0x1b, 0xfe, 0xfb, 0xc6, 0xdc, 0xdf, 0x98, 0x1f,
	0xf8, 0xe5, 0xb7, 0xf8, 0x85, 0xec, 0x6a, 0x1a, 0x8e, 0x7b, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xc5, 0x3e, 0x09, 0x05, 0xb2, 0x01, 0x00, 0x00,
}

func (m *Character) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Character) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Character) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Ctype) > 0 {
		i -= len(m.Ctype)
		copy(dAtA[i:], m.Ctype)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Ctype)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SaleTime != 0 {
		i = encodeVarintCharacter(dAtA, i, uint64(m.SaleTime))
		i--
		dAtA[i] = 0x10
	}
	if m.TradeRestricted {
		i--
		if m.TradeRestricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCharacter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCharacter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Character) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeRestricted {
		n += 2
	}
	if m.SaleTime != 0 {
		n += 1 + sovCharacter(uint64(m.SaleTime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Ctype)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	return n
}

func sovCharacter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCharacter(x uint64) (n int) {
	return sovCharacter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Character) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Character: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Character: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeRestricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TradeRestricted = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleTime", wireType)
			}
			m.SaleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCharacter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCharacter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCharacter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCharacter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCharacter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCharacter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCharacter = fmt.Errorf("proto: unexpected end of group")
)
